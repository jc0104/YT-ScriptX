/^http(s*):\/\//.test(location.href) || alert('请先部署到 localhost 下再访问');
var host = window.location.host
var protocol = window.location.protocol;
var webUrl = protocol + "//" + host + "/";
var scriptUrl=getCurrentScriptPath();
scriptUrl=scriptUrl.replace(scriptUrl.split("/")[scriptUrl.split("/").length-1],"")

var initCss = [
    scriptUrl+"custom/public.css"
];

//初始化页面加载公共js脚本
var initScripts = [
        scriptUrl+"custom/sysinfo.js",
        scriptUrl+"script/require/require.min.js"
    ];
//****************************************************************************************************************************************************
//页面加载-开始
//----------------------------------------------------------------------------------------------------------------------------------------------------
var loadPage = function (callback) {
    var newCss = mergeUnique(initCss, css)
    loadCSS(newCss, 'system-styles', function () {
        console.log("所有css样式已加载完成！");
    });
    var newScripts = mergeUnique(initScripts, scripts)
    loadJS(newScripts, function () {
        console.log("所有js脚本已加载完成！");
        if (typeof callback === 'function') callback();
        document.title = SN;
    }, 1);
}
//----------------------------------------------------------------------------------------------------------------------------------------------------
//页面加载-结束
//****************************************************************************************************************************************************
//****************************************************************************************************************************************************
//动态加载js脚本-开始
//----------------------------------------------------------------------------------------------------------------------------------------------------
var scripts = [];//js脚本文件数组,路径相对于根目录开始不加/
//调用入口
var loadJS = function (scripts, callback, loadJStype) {
    if (loadJStype == 1) {//方式一、递归顺序加载JS（确保顺序）
        loadScriptsSequentially(scripts, callback)
    }
    if (loadJStype == 2) {//方式二、并行加载js + 顺序执行（推荐）
        loadScriptsParallel(scripts, callback)
    }
}
/* 调用示例
 scripts = [
     "public/test1.js",
     "public/test2.js"
 ];
 loadJS(scripts, function() {
     a();
     b();
 },1);
*/
//----------------------------------------------------------------------------------------------------------------------------------------------------
//方式一、递归顺序加载JS（确保顺序）
var loadScriptsSequentially = function (scripts, callback) {
    var index = 0;
    function loadNext() {
        if (index >= scripts.length) {
            if (typeof callback === 'function') callback();
            return;
        }
        $.getScript(scripts[index])
            .done(function () {
                console.log("js脚本加载成功: " + scripts[index]);
                index++;
                loadNext(); // 加载下一个
            })
            .fail(function () {
                console.error("js脚本加载失败: " + scripts[index]);
                index++;
                loadNext(); // 即使失败也继续加载后续文件
            });
    }
    loadNext(); // 开始加载
}
//----------------------------------------------------------------------------------------------------------------------------------------------------
//方式二、并行加载js + 顺序执行（推荐）
var loadScriptsParallel = function (scripts, callback) {
    var deferreds = [];
    // 1. 并行加载所有脚本
    $.each(scripts, function (i, src) {
        deferreds.push(
            $.ajax({
                url: src,
                dataType: "script",
                timeout: 5000, // 5秒超时
                cache: true // 利用浏览器缓存
            })
        );
    });
    // 2. 等待所有加载完成
    $.when.apply($, deferreds)
        .done(function () {
            if (typeof callback === 'function') callback();
        })
        .fail(function (jqXHR) {
            console.error("js脚本加载失败: ", $(jqXHR.responseText).filter('pre').text() || $(jqXHR.responseText).find('pre').text());
        });
}
//----------------------------------------------------------------------------------------------------------------------------------------------------
//动态加载js脚本-结束
//****************************************************************************************************************************************************
//****************************************************************************************************************************************************
//动态加载css-开始
//----------------------------------------------------------------------------------------------------------------------------------------------------
var css = [];//css样式文件数组,路径相对于根目录开始不加/
//调用入口
var loadCSS = function (css, themeId, callback) {
    // 移除之前加载的主题CSS
    $('link[data-dynamic-theme]').remove();
    // 创建加载状态元素
    css.forEach(function (cssUrl, index) {
        // 创建link元素加载CSS
        $('<link>', {
            id: themeId,
            rel: 'stylesheet',
            type: 'text/css',
            href: cssUrl,
            'data-dynamic-theme': themeId + "-" + index
        })
            .appendTo('head')
            .on('load', function () {
                console.log("css样式加载成功: ", cssUrl);
                if ((index + 1) >= css.length) {
                    if (typeof callback === 'function') callback();
                }
            })
            .on('error', function () {
                console.error("css样式加载失败: ", cssUrl);
                if ((index + 1) >= css.length) {
                    if (typeof callback === 'function') callback();
                }
            });
    });
}
/* 调用示例
 css=[
     "test/test11.css",
     "test/test2.css"];
 loadCSS(css, 'test-styles', function () {
     console.log("所有css样式已加载完成！");
 });
*/
//----------------------------------------------------------------------------------------------------------------------------------------------------
//动态加载css-结束
//****************************************************************************************************************************************************
//****************************************************************************************************************************************************
//多个一维数组合并去重-开始
//----------------------------------------------------------------------------------------------------------------------------------------------------
var mergeUnique = function (...arrays) {
    const merged = [].concat(...arrays);
    try {
        return [...new Set(merged)]; // ES6 方式
    } catch (error) {
        // 或兼容旧版: 
        return merged.filter((v, i) => merged.indexOf(v) === i);
    }
}
//----------------------------------------------------------------------------------------------------------------------------------------------------
//多个一维数组合并去重-结束
//****************************************************************************************************************************************************
//****************************************************************************************************************************************************
//校验验证-开始
//----------------------------------------------------------------------------------------------------------------------------------------------------
//判断字符串是否为空或null或undefined，是返回"",否返回原字符串
function IsNull(Stra) {
    var Strb = Stra;
    try {
        if (Strb == null || Strb == "null" || Stra == "undefined" || typeof (Stra) == "undefined") {
            Strb = "";
        }
    } catch (e) {
        Strb = "";
    }
    return Strb;
}
//----------------------------------------------------------------------------------------------------------------------------------------------------
//校验验证-结束
//****************************************************************************************************************************************************
//****************************************************************************************************************************************************
//XXXXX-开始
//----------------------------------------------------------------------------------------------------------------------------------------------------
function getCurrentScriptPath() {
  const scripts = document.getElementsByTagName('script');
  const currentScript = scripts[scripts.length - 1];
  return currentScript.src;
}
//----------------------------------------------------------------------------------------------------------------------------------------------------
//XXXXX-结束
//****************************************************************************************************************************************************


//****************************************************************************************************************************************************
//XXXXX-开始
//----------------------------------------------------------------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------------------------------------------------------------
//XXXXX-结束
//****************************************************************************************************************************************************